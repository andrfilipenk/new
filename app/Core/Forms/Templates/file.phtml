<?php
/**
 * Default File Upload Field Template
 * 
 * Template for rendering file upload fields
 * 
 * Available variables:
 * @var \Core\Forms\Fields\FileUploadField $field The field instance
 * @var array $context Rendering context
 * @var array $options Rendering options
 */

// Get field data
$fieldName = $field->getName();
$fieldId = $field->getAttribute('id', $fieldName);
$fieldLabel = $field->getLabel();
$fieldHelp = $field->getHelpText();
$isRequired = $field->isRequired();
$isMultiple = $field->isMultiple();
$maxFileSize = $field->getMaxFileSize();
$allowedTypes = $field->getAllowedMimeTypes();
$allowedExtensions = $field->getAllowedExtensions();

// Get errors
$errors = $context['errors'][$fieldName] ?? [];
if (!is_array($errors)) {
    $errors = [$errors];
}
$hasErrors = !empty($errors);

// Build attributes
$attributes = $field->getAttributes();
$attributes['type'] = 'file';

if ($hasErrors) {
    $classes = $attributes['class'] ?? '';
    $attributes['class'] = trim($classes . ' is-invalid');
}

if ($isMultiple) {
    $attributes['multiple'] = 'multiple';
    $attributes['name'] = $fieldName . '[]';
}

// Add accept attribute
if (!empty($allowedTypes) || !empty($allowedExtensions)) {
    $acceptList = $allowedTypes;
    foreach ($allowedExtensions as $ext) {
        $acceptList[] = '.' . $ext;
    }
    $attributes['accept'] = implode(',', $acceptList);
}

// Build attribute string
$attrString = '';
foreach ($attributes as $name => $value) {
    if ($name === 'value') continue; // File inputs don't have values
    if (is_bool($value)) {
        $attrString .= $value ? ' ' . htmlspecialchars($name, ENT_QUOTES, 'UTF-8') : '';
    } else {
        $attrString .= sprintf(
            ' %s="%s"',
            htmlspecialchars($name, ENT_QUOTES, 'UTF-8'),
            htmlspecialchars($value, ENT_QUOTES, 'UTF-8')
        );
    }
}

// Format file size
$formatBytes = function($bytes) {
    $units = ['B', 'KB', 'MB', 'GB'];
    $power = $bytes > 0 ? floor(log($bytes, 1024)) : 0;
    $power = min($power, count($units) - 1);
    return sprintf('%.2f %s', $bytes / pow(1024, $power), $units[$power]);
};
?>
<div class="form-field file-field<?= $hasErrors ? ' has-error' : '' ?>">
    <?php if ($fieldLabel): ?>
    <label for="<?= htmlspecialchars($fieldId, ENT_QUOTES, 'UTF-8') ?>" class="field-label">
        <?= htmlspecialchars($fieldLabel, ENT_QUOTES, 'UTF-8') ?>
        <?php if ($isRequired): ?>
        <span class="required-indicator" aria-label="required">*</span>
        <?php endif; ?>
    </label>
    <?php endif; ?>
    
    <input<?= $attrString ?> />
    
    <?php if ($fieldHelp): ?>
    <small class="field-help"><?= htmlspecialchars($fieldHelp, ENT_QUOTES, 'UTF-8') ?></small>
    <?php endif; ?>
    
    <?php if (!empty($allowedExtensions) || $maxFileSize > 0): ?>
    <small class="field-info">
        <?php if (!empty($allowedExtensions)): ?>
        Allowed: <?= htmlspecialchars(implode(', ', array_map(fn($ext) => '.' . $ext, $allowedExtensions)), ENT_QUOTES, 'UTF-8') ?>
        <?php endif; ?>
        <?php if ($maxFileSize > 0): ?>
        (Max: <?= $formatBytes($maxFileSize) ?>)
        <?php endif; ?>
    </small>
    <?php endif; ?>
    
    <?php if ($hasErrors): ?>
    <div class="field-errors">
        <?php foreach ($errors as $error): ?>
        <div class="field-error"><?= htmlspecialchars($error, ENT_QUOTES, 'UTF-8') ?></div>
        <?php endforeach; ?>
    </div>
    <?php endif; ?>
</div>
